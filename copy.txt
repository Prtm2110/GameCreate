import pygame
from sys import exit
from random import randint

def score():
    current = int(pygame.time.get_ticks() / 100) - start
    score_text = font.render(f'Score: {current}', True, (64, 64, 64))
    score_rect = score_text.get_rect(center=(400, 50))
    pygame.draw.rect(screen, '#c0e8ec', score_rect)
    pygame.draw.rect(screen, '#c0e8ec', score_rect, 10)
    screen.blit(score_text, score_rect)

def start_screen():
    stand = pygame.image.load('graphics/player/player_stand.png').convert_alpha()
    stand_rect = stand.get_rect(center=(400, 200))

    name = font.render('RatRace', True, (64, 64, 64))
    name_rect = name.get_rect(center=(400, 50))

    message = font.render('Press SPACE to Start', True, (64, 64, 64))
    message_rect = message.get_rect(center=(400, 300))

    screen.fill((94, 129, 162)) 
    screen.blit(name, name_rect)
    screen.blit(stand, stand_rect)
    screen.blit(message, message_rect)

def game_over_screen():
    menu = font.render('Restart Game? [Y/N]', True, (64, 64, 64))
    menu_rect = menu.get_rect(center=(400, 200))
    
    pygame.draw.rect(screen, 'Yellow', menu_rect)
    pygame.draw.rect(screen, 'Yellow', menu_rect, 40)
    screen.blit(menu, menu_rect)

def obstacle_move(obstacle_list):
    for obstacle_rect in obstacle_list:
        obstacle_rect.x -= 5  # Move obstacles to the left

        # Draw the obstacle based on its y position
        if obstacle_rect.y == 300:
            screen.blit(snail, obstacle_rect)  # Draw snail
        elif obstacle_rect.y == 90:
            screen.blit(fly, obstacle_rect)  # Draw fly
        else:
            print(f"Unexpected obstacle y position: {obstacle_rect.y}")

    # Remove obstacles that have gone off-screen
    obstacle_list = [obstacle for obstacle in obstacle_list if obstacle.x > -100]
    return obstacle_list
    

def collision(player_rect, obstacles):
    for obs in obstacles:
        if player_rect.colliderect(obs):
            return True
    return False

# Initialize Pygame
pygame.init()

# Constants
GRAVITY = 1.1
start = 0

# Game states
game_active = False  
show_start_screen = True
game_over = False

# Set up the screen
screen = pygame.display.set_mode((800, 400))
pygame.display.set_caption('Runner')
clock = pygame.time.Clock()

# Load assets
try:
    sky = pygame.image.load('graphics/Sky.png').convert()
    ground = pygame.image.load('graphics/ground.png').convert()
    font = pygame.font.Font('font/Pixeltype.ttf', 50)

    snail = pygame.image.load('graphics/snail/snail1.png').convert_alpha()
    fly = pygame.image.load('graphics/fly/fly1.png').convert_alpha()
except pygame.error as e:
    print(f"Error loading assets: {e}")
    pygame.quit()
    exit()

obstacle_list = []

player = pygame.image.load('graphics/player/player_walk_1.png').convert_alpha()
player_rect = player.get_rect(midbottom=(80, 300))

# Game variables
gravity = 0
timer = pygame.USEREVENT + 1
pygame.time.set_timer(timer, 1500)

# Main game loop
while True:
    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            exit()

        if game_active:
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    if player_rect.bottom == 300:
                        gravity = -22

            if event.type == pygame.MOUSEBUTTONDOWN:
                if player_rect.collidepoint(event.pos):
                    if player_rect.bottom == 300:
                        gravity = -22

            if event.type == timer:
                c = randint(0, 1)  # 0 or 1 for obstacle type
                if c == 0:
                    new_obstacle = snail.get_rect(midbottom=(randint(900, 1100), 300))
                    print(f"Adding snail at: {new_obstacle.midbottom}")
                    obstacle_list.append(new_obstacle)
                else:
                    new_obstacle = fly.get_rect(midbottom=(randint(900, 1100), 90))
                    print(f"Adding fly at: {new_obstacle.midbottom}")
                    obstacle_list.append(new_obstacle)

        elif show_start_screen:
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    game_active = True
                    show_start_screen = False
                    player_rect.y = 300
                    gravity = 0
                    start = int(pygame.time.get_ticks() / 100)

        elif game_over:
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_y or event.key == pygame.K_SPACE:
                    game_active = True
                    game_over = False
                    obstacle_list.clear()
                    player_rect.y = 300
                    gravity = 0
                    start = int(pygame.time.get_ticks() / 100)
                elif event.key == pygame.K_n:
                    pygame.quit()
                    exit()

    # Clear screen and redraw
    screen.blit(sky, (0, 0))
    screen.blit(ground, (0, 300))

    if show_start_screen:
        start_screen()
    elif game_active:
        # Update game state
        gravity += GRAVITY
        player_rect.y += gravity
        
        # Check player falling below ground
        if player_rect.bottom > 300:
            player_rect.bottom = 300
            gravity = 0

        # Update obstacle positions
        obstacle_list = obstacle_move(obstacle_list)

        # Check for collisions
        if collision(player_rect, obstacle_list):
            game_active = False
            game_over = True

        # Drawing
        screen.blit(player, player_rect)
        score()
    elif game_over:
        game_over_screen()

    # Update display
    pygame.display.update()
    clock.tick(60)
